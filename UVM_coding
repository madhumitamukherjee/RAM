`include "uvm_macros.svh"
import uvm_pkg::*;
 ////////////////////////////////Transction Class////////////////////
 
class transaction extends uvm_sequence_item;
rand bit rdwr;
rand bit [3:0] datain;
rand bit [5:0] address;
bit [3:0] dataout;
 
  constraint addr_C {address > 2; address < 8;};
 
function new(input string inst = "TRANS");
super.new(inst);
endfunction
 
`uvm_object_utils_begin(transaction)
`uvm_field_int(rdwr,UVM_DEFAULT)
`uvm_field_int(datain,UVM_DEFAULT)
`uvm_field_int(address,UVM_DEFAULT)
`uvm_object_utils_end
 
endclass
////////////////////////////Generator Class///////////////////////////

class generator extends uvm_sequence#(transaction);
`uvm_object_utils(generator)
 
transaction t;
integer i;
 
function new(input string inst = "GEN");
super.new(inst);
endfunction
 
virtual task body();
t = transaction::type_id::create("TRANS");
for(i =0; i< 64; i++) begin
start_item(t);
t.randomize();
`uvm_info("GEN", "Data send to Driver", UVM_NONE);
t.print(uvm_default_line_printer);
finish_item(t);
#20;
end
endtask
endclass
//////////////////////////////Driver Class///////////////////////

class driver extends uvm_driver#(transaction);
`uvm_component_utils(driver)
 
transaction t;
virtual memory_if mif;
 
function new(input string inst = "DRV", uvm_component c);
super.new(inst,c);
endfunction
 
virtual function void build_phase(uvm_phase phase);
super.build_phase(phase);
t = transaction::type_id::create("TRANS");
if(!uvm_config_db#(virtual memory_if)::get(this,"","mif",mif))
`uvm_info("DRV", "Unable to access Interface", UVM_NONE);
endfunction
 
virtual task run_phase(uvm_phase phase);
forever begin
seq_item_port.get_next_item(t);
mif.rdwr = t.rdwr;
mif.datain = t.datain;
mif.address = t.address;
`uvm_info("DRV","Send data to DUT", UVM_NONE);
t.print(uvm_default_line_printer);
seq_item_port.item_done();
  @(posedge mif.clk);
 
  if(t.rdwr == 1'b1)
    @(posedge mif.clk);
  
 end
endtask
endclass
/////////////////////////////Monitor Class////////////////////////////

class monitor extends uvm_monitor;
`uvm_component_utils(monitor)
 
uvm_analysis_port #(transaction) send;
virtual memory_if mif;
transaction t;
 
function new(input string inst = "MON", uvm_component c);
super.new(inst,c);
send = new("WRITE",this);
endfunction
 
virtual function void build_phase(uvm_phase phase);
super.build_phase(phase);
t = transaction::type_id::create("TRANS");
if(!uvm_config_db#(virtual memory_if)::get(this,"","mif",mif))
`uvm_info("MON", "Unable to access Interface", UVM_NONE);
endfunction
 
virtual task run_phase(uvm_phase phase);
forever begin
  @(posedge mif.clk);  
t.rdwr = mif.rdwr;
t.datain = mif.datain;
t.address = mif.address;
 
  if(mif.enable == 1'b1) begin
    @(posedge mif.clk)
    t.dataout = mif.dataout;
end 
    
  
`uvm_info("MON","Send data to Scoreboard", UVM_NONE);
t.print(uvm_default_line_printer);
send.write(t);
 
end
endtask
 
endclass
//////////////////////////Scoreboard Class//////////////////////////////////

class scoreboard extends uvm_scoreboard;
`uvm_component_utils(scoreboard)
 
uvm_analysis_imp #(transaction,scoreboard) recv;

reg [3:0] tarr[64] = '{default:0} ;
 
function new(input string inst = "SCO", uvm_component c);
super.new(inst,c);
recv = new("READ",this);
endfunction
 
virtual function void write(transaction data);
`uvm_info("SCO","Data rcvd from Monitor", UVM_NONE);
data.print(uvm_default_line_printer);                        
    
if(data.rdwr == 1'b1)
    begin
      tarr[data.address] = data.datain;
      `uvm_info("SCO", $sformatf("Data Write oper datain : %0h and tarr[addr] : %0h", data.datain,tarr[data.address]), UVM_NONE);    
    end
    else
      begin
        data.dataout= tarr[data.address];
      `uvm_info("SCO", $sformatf("Data Read oper dataout : %0h and tarr[addr] : %0h", data.dataout,tarr[data.address]), UVM_NONE);    
    end   
  
   if(data.dataout == tarr[data.address])
        `uvm_info("SCO", "Test Passed", UVM_NONE)
      else
        `uvm_error("SCO", "TEST Failed")
endfunction
endclass
//////////////////////////////////////Agent Class////////////////////////////////////////////

class agent extends uvm_agent;
`uvm_component_utils(agent)
 
function new(input string inst = "AGENT", uvm_component c);
super.new(inst,c);
endfunction
 
monitor m;
driver d;
uvm_sequencer #(transaction) seq;

virtual function void build_phase(uvm_phase phase);
super.build_phase(phase);
m = monitor::type_id::create("MON",this);
d = driver::type_id::create("DRV",this);
seq = uvm_sequencer #(transaction)::type_id::create("SEQ",this);
endfunction
 
virtual function void connect_phase(uvm_phase phase);
super.connect_phase(phase);
d.seq_item_port.connect(seq.seq_item_export);
endfunction
endclass

///////////////////////////////////////ENV Class//////////////////////////////////////////////////
 
 class env extends uvm_env;
`uvm_component_utils(env)
 
function new(input string inst = "ENV", uvm_component c);
super.new(inst,c);
endfunction
 
scoreboard s;
agent a;
 
virtual function void build_phase(uvm_phase phase);
super.build_phase(phase);
a = agent::type_id::create("AGENT",this);
s = scoreboard::type_id::create("SCO",this);
endfunction
 
 
virtual function void connect_phase(uvm_phase phase);
super.connect_phase(phase);
a.m.send.connect(s.recv);
endfunction
endclass
 
/////////////////////////////////////Test Class///////////////////////////////////////////////////

class test extends uvm_test;
`uvm_component_utils(test)
 
function new(input string inst = "TEST", uvm_component c);
super.new(inst,c);
endfunction
 
generator gen;
env e;
 
virtual function void build_phase(uvm_phase phase);
super.build_phase(phase);
e = env::type_id::create("ENV",this);
gen = generator::type_id::create("GEN",this);
endfunction
 
virtual task run_phase(uvm_phase phase);
phase.raise_objection(this);
gen.start(e.a.seq);
phase.drop_objection(this);
endtask
endclass
 
/////////////////////////////////////////Testbench module////////////////////////////////////////

module memory_tb;
test t;
memory_if mif();
 
  memory_read_write dut (.clk(mif.clk), .rdwr(mif.rdwr), .datain(mif.datain), .address(mif.address), .dataout(mif.dataout),.enable(mif.enable));
 
initial begin
mif.clk = 0;
mif.enable=0;
#10
mif.enable=1;  
end
 
always#10 mif.clk = ~mif.clk;
  
initial begin
$dumpfile("dump.vcd");
$dumpvars; 
t = new("TEST", null);
  uvm_config_db #(virtual memory_if)::set(null, "*", "mif", mif);
run_test();
end
 
endmodule
